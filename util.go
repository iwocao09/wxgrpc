package main

import (
	"bytes"
	"compress/zlib"
	"crypto/aes"
	"crypto/cipher"
	"crypto/md5"
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"math"
	m "math/rand"
	"net"
	"net/http"
	"strconv"
	"time"
)

type PAYLOAD map[string]interface{}

func Compress(src []byte) []byte {
	var buffer bytes.Buffer
	w := zlib.NewWriter(&buffer)
	w.Write(src)
	w.Close()
	return buffer.Bytes()
}

func Uncompress(src []byte) []byte {
	b := bytes.NewReader(src)
	var out bytes.Buffer
	r, err := zlib.NewReader(b)
	if err != nil || r == nil {
		log.Println("zlib解密失败", err)
		return nil
	}
	io.Copy(&out, r)
	r.Close()
	return out.Bytes()
}
func padding(src []byte, blockSize int) []byte {
	padding := blockSize - len(src)%blockSize
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(src, padtext...)
}

func unpadding(src []byte) []byte {
	length := len(src)
	unpadding := int(src[length-1])
	if length-unpadding <= 0 {
		return nil
	}
	return src[:(length - unpadding)]
}
func aesEncrypt(plaintext []byte, key []byte) []byte {
	block, err := aes.NewCipher(key)
	if err != nil {
		log.Println(err)
		return nil
	}
	blockSize := block.BlockSize()
	plaintext = padding(plaintext, blockSize)
	iv := key
	blockMode := cipher.NewCBCEncrypter(block, iv)
	ciphertext := make([]byte, len(plaintext))
	blockMode.CryptBlocks(ciphertext, plaintext)
	return ciphertext
}

func aesDecrypt(ciphertext []byte, key []byte) []byte {
	block, err := aes.NewCipher(key)
	if err != nil {
		log.Println(err)
		return nil
	}
	blockSize := block.BlockSize()
	if len(ciphertext) < blockSize {
		return nil
	}
	iv := key
	if len(ciphertext)%blockSize != 0 {
		return nil
	}
	blockModel := cipher.NewCBCDecrypter(block, iv)
	plaintext := make([]byte, len(ciphertext))
	blockModel.CryptBlocks(plaintext, ciphertext)
	return unpadding(plaintext)
}

func DoMd5(src []byte) []byte {
	w := md5.New()
	w.Write(src)
	return w.Sum(nil)
}
func DoMd5Ex(str string) string {
	data := []byte(str)
	has := md5.Sum(data)
	md5str := fmt.Sprintf("%x", has)
	return md5str
}

func Compress_AES(src, key []byte) (dst []byte) {
	return aesEncrypt(Compress(src), key)
}
func Uncompress_AES(src, key []byte) (dst []byte) {
	return Uncompress(aesDecrypt(src, key))
}

func S2H(s string) []byte {
	b, _ := hex.DecodeString(s)
	return b
}
func H2S(buf []byte) string {
	return hex.EncodeToString(buf)
}

func Str2Float64(str string, defaultValue float64) float64 {
	i, err := strconv.ParseFloat(str, 64)
	if err == nil {
		return i
	}
	return defaultValue
}
func TimeStr2Unix(timeStr string) int64 {
	theTime, err := time.ParseInLocation("2006-01-02 15:04", timeStr, time.Local)
	if err != nil {
		return time.Now().Unix()
	}
	return theTime.Unix()
}
func Str2Int(str string, defaultValue int) int {
	i, err := strconv.Atoi(str)
	if err == nil {
		return i
	}
	return defaultValue
}

func Str2Int64(str string, defaultValue int64) int64 {
	i, err := strconv.ParseInt(str, 10, 64)
	if err == nil {
		return i
	}
	return defaultValue
}
func RandomInt() int {
	var bytes [4]byte
	_, err := rand.Read(bytes[:])
	if err != nil {
		log.Println(err)
		return -1
	}
	i := binary.LittleEndian.Uint32(bytes[:])
	return int(i)
}

func RandomIntRange(start, end int) int {
	var val int
	if start >= end {
		return 0
	}
	size := end - start
	min := (math.MaxInt32 - size) % size
	for {
		val = RandomInt()
		if val >= min {
			break
		}
	}
	val = val % size
	return val + start
}

func GenerateCName() string {
	var lastName = []string{
		"赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋",
		"沈", "韩", "杨", "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏",
		"陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭",
		"郎", "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "任", "袁", "柳", "鲍", "史", "唐", "费", "薛",
		"雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "安", "常", "傅", "卞", "齐", "元", "顾", "孟",
		"平", "黄", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "狄", "米", "伏", "成", "戴", "谈",
		"宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁", "杜", "阮", "蓝", "闵", "季", "贾",
		"路", "娄", "江", "童", "颜", "郭", "梅", "盛", "林", "钟", "徐", "邱", "骆", "高", "夏", "蔡", "田",
		"樊", "胡", "凌", "霍", "虞", "万", "支", "柯", "管", "卢", "莫", "柯", "房", "裘", "缪", "解", "应",
		"宗", "丁", "宣", "邓", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "龚", "程", "嵇", "邢",
		"裴", "陆", "荣", "翁", "荀", "于", "惠", "甄", "曲", "封", "储", "仲", "伊", "宁", "仇", "甘", "武",
		"符", "刘", "景", "詹", "龙", "叶", "幸", "司", "黎", "溥", "印", "怀", "蒲", "邰", "从", "索", "赖",
		"卓", "屠", "池", "乔", "胥", "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵",
		"冉", "宰", "雍", "桑", "寿", "通", "燕", "浦", "尚", "农", "温", "别", "庄", "晏", "柴", "瞿", "阎",
		"连", "习", "容", "向", "古", "易", "廖", "庾", "终", "步", "都", "耿", "满", "弘", "匡", "国", "文",
		"寇", "广", "禄", "阙", "东", "欧", "利", "师", "巩", "聂", "关", "荆", "司马", "上官", "欧阳", "夏侯",
		"诸葛", "闻人", "东方", "赫连", "皇甫", "尉迟", "公羊", "澹台", "公冶", "宗政", "濮阳", "淳于", "单于",
		"太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐", "徐离", "宇文", "长孙", "慕容", "司徒", "司空", "李", "王",
		"张", "刘", "陈", "杨", "赵", "黄", "周", "吴", "徐", "孙", "胡", "朱", "高", "林", "何", "郭", "马", "罗", "梁", "宋",
		"郑", "谢", "韩", "唐", "冯", "于", "董", "萧", "程", "曹", "袁", "邓", "许", "傅", "沈", "曾", "彭", "吕", "苏", "卢",
		"蒋", "蔡", "贾", "丁", "魏", "薛", "叶", "阎", "余", "潘", "杜", "戴", "夏", "锺", "汪", "田", "任", "姜", "范", "方",
		"石", "姚", "谭", "廖", "邹", "熊", "金", "陆", "郝", "孔", "白", "崔", "康", "毛", "邱", "秦", "江", "史", "顾", "侯",
		"邵", "孟", "龙", "万", "段", "雷", "钱", "汤", "尹", "黎", "易", "常", "武", "乔", "贺", "赖", "龚", "文"}
	var firstName = []string{
		"伟", "刚", "勇", "毅", "俊", "峰", "强", "军", "平", "保", "东", "文", "辉", "力", "明", "永", "健", "世", "广", "志", "义",
		"兴", "良", "海", "山", "仁", "波", "宁", "贵", "福", "生", "龙", "元", "全", "国", "胜", "学", "祥", "才", "发", "武", "新",
		"利", "清", "飞", "彬", "富", "顺", "信", "子", "杰", "涛", "昌", "成", "康", "星", "光", "天", "达", "安", "岩", "中", "茂",
		"进", "林", "有", "坚", "和", "彪", "博", "诚", "先", "敬", "震", "振", "壮", "会", "思", "群", "豪", "心", "邦", "承", "乐",
		"绍", "功", "松", "善", "厚", "庆", "磊", "民", "友", "裕", "河", "哲", "江", "超", "浩", "亮", "政", "谦", "亨", "奇", "固",
		"之", "轮", "翰", "朗", "伯", "宏", "言", "若", "鸣", "朋", "斌", "梁", "栋", "维", "启", "克", "伦", "翔", "旭", "鹏", "泽",
		"晨", "辰", "士", "以", "建", "家", "致", "树", "炎", "德", "行", "时", "泰", "盛", "雄", "琛", "钧", "冠", "策", "腾", "楠",
		"榕", "风", "航", "弘", "秀", "娟", "英", "华", "慧", "巧", "美", "娜", "静", "淑", "惠", "珠", "翠", "雅", "芝", "玉", "萍",
		"红", "娥", "玲", "芬", "芳", "燕", "彩", "春", "菊", "兰", "凤", "洁", "梅", "琳", "素", "云", "莲", "真", "环", "雪", "荣",
		"爱", "妹", "霞", "香", "月", "莺", "媛", "艳", "瑞", "凡", "佳", "嘉", "琼", "勤", "珍", "贞", "莉", "桂", "娣", "叶", "璧",
		"璐", "娅", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "姣", "婉", "娴", "瑾", "颖", "露", "瑶",
		"怡", "婵", "雁", "蓓", "纨", "仪", "荷", "丹", "蓉", "眉", "君", "琴", "蕊", "薇", "菁", "梦", "岚", "苑", "婕", "馨", "瑗",
		"琰", "韵", "融", "园", "艺", "咏", "卿", "聪", "澜", "纯", "毓", "悦", "昭", "冰", "爽", "琬", "茗", "羽", "希", "欣", "飘",
		"育", "滢", "馥", "筠", "柔", "竹", "霭", "凝", "晓", "欢", "霄", "枫", "芸", "菲", "寒", "伊", "亚", "宜", "可", "姬", "舒",
		"影", "荔", "枝", "丽", "阳", "妮", "宝", "贝", "初", "程", "梵", "罡", "恒", "鸿", "桦", "骅", "剑", "娇", "纪", "宽", "苛",
		"灵", "玛", "媚", "琪", "晴", "容", "睿", "烁", "堂", "唯", "威", "韦", "雯", "苇", "萱", "阅", "彦", "宇", "雨", "洋", "忠",
		"宗", "曼", "紫", "逸", "贤", "蝶", "菡", "绿", "蓝", "儿", "翠", "烟", "小", "轩", "静静", "婷婷", "园园", "明明", "冰冰", "莎莎",
		"乐乐", "晶晶", "诗诗", "倩倩", "菲菲", "伟", "强", "华", "志", "建", "立", "超", "荣", "文", "达", "敏", "江", "晖", "刚", "雷", "磊", "春", "夏",
		"哲", "东", "冬", "楠", "昊", "宇", "慧", "瑶", "翔", "星", "燕", "迪", "钰", "俊", "怡", "雪", "佳", "杰", "芮", "可", "涵", "熙", "裕", "小", "明",
		"国", "万", "梓", "浩", "晓", "德", "力", "世", "秀", "春", "子", "天", "金", "江", "泽", "玉", "紫", "亦", "家", "文", "达", "光", "梦", "永", "成",
		"婷", "洪", "俊", "恒", "恩", "雅", "轩", "若", "欣", "怡", "一", "常", "平", "芳", "华", "云", "海", "宣", "盛", "强", "梅", "志", "慧", "博", "敏",
		"春", "夏", "杰", "宇", "翔", "北", "秋", "东", "新", "瑶", "豪", "星", "燕", "铭", "奇", "康", "鑫", "凯", "雨", "栋", "梁", "瑞", "龙", "宜", "彤",
		"芮", "逸", "扬", "林", "的", "一", "是", "了", "我", "不", "人", "在", "他", "有", "这", "个", "上", "们", "来", "到", "时", "大", "地", "为",
		"子", "中", "你", "说", "生", "国", "年", "着", "就", "那", "和", "要", "她", "出", "也", "得", "里", "后", "自", "以",
		"会", "家", "可", "下", "而", "过", "天", "去", "能", "对", "小", "多", "然", "于", "心", "学", "么", "之", "都", "好",
		"看", "起", "发", "当", "没", "成", "只", "如", "事", "把", "还", "用", "第", "样", "道", "想", "作", "种", "开", "美",
		"总", "从", "无", "情", "己", "面", "最", "女", "但", "现", "前", "些", "所", "同", "日", "手", "又", "行", "意", "动",
		"方", "期", "它", "头", "经", "长", "儿", "回", "位", "分", "爱", "老", "因", "很", "给", "名", "法", "间", "斯", "知",
		"世", "什", "两", "次", "使", "身", "者", "被", "高", "已", "亲", "其", "进", "此", "话", "常", "与", "活", "正", "感",
		"见", "明", "问", "力", "理", "尔", "点", "文", "几", "定", "本", "公", "特", "做", "外", "孩", "相", "西", "果", "走",
		"将", "月", "十", "实", "向", "声", "车", "全", "信", "重", "三", "机", "工", "物", "气", "每", "并", "别", "真", "打",
		"太", "新", "比", "才", "便", "夫", "再", "书", "部", "水", "像", "眼", "等", "体", "却", "加", "电", "主", "界", "门",
		"利", "海", "受", "听", "表", "德", "少", "克", "代", "员", "许", "稜", "先", "口", "由", "死", "安", "写", "性", "马",
		"光", "白", "或", "住", "难", "望", "教", "命", "花", "结", "乐", "色", "更", "拉", "东", "神", "记", "处", "让", "母",
		"父", "应", "直", "字", "场", "平", "报", "友", "关", "放", "至", "张", "认", "接", "告", "入", "笑", "内", "英", "军",
		"候", "民", "岁", "往", "何", "度", "山", "觉", "路", "带", "万", "男", "边", "风", "解", "叫", "任", "金", "快", "原",
		"吃", "妈", "变", "通", "师", "立", "象", "数", "四", "失", "满", "战", "远", "格", "士", "音", "轻", "目", "条", "呢",
		"病", "始", "达", "深", "完", "今", "提", "求", "清", "王", "化", "空", "业", "思", "切", "怎", "非", "找", "片", "罗",
		"钱", "紶", "吗", "语", "元", "喜", "曾", "离", "飞", "科", "言", "干", "流", "欢", "约", "各", "即", "指", "合", "反",
		"题", "必", "该", "论", "交", "终", "林", "请", "医", "晚", "制", "球", "决", "窢", "传", "画", "保", "读", "运", "及",
		"则", "房", "早", "院", "量", "苦", "火", "布", "品", "近", "坐", "产", "答", "星", "精", "视", "五", "连", "司", "巴",
		"奇", "管", "类", "未", "朋", "且", "婚", "台", "夜", "青", "北", "队", "久", "乎", "越", "观", "落", "尽", "形", "影",
		"红", "爸", "百", "令", "周", "吧", "识", "步", "希", "亚", "术", "留", "市", "半", "热", "送", "兴", "造", "谈", "容",
		"极", "随", "演", "收", "首", "根", "讲", "整", "式", "取", "照", "办", "强", "石", "古", "华", "諣", "拿", "计", "您",
		"装", "似", "足", "双", "妻", "尼", "转", "诉", "米", "称", "丽", "客", "南", "领", "节", "衣", "站", "黑", "刻", "统",
		"断", "福", "城", "故", "历", "惊", "脸", "选", "包", "紧", "争", "另", "建", "维", "绝", "树", "系", "伤", "示", "愿",
		"持", "千", "史", "谁", "准", "联", "妇", "纪", "基", "买", "志", "静", "阿", "诗", "独", "复", "痛", "消", "社", "算",
		"义", "竟", "确", "酒", "需", "单", "治", "卡", "幸", "兰", "念", "举", "仅", "钟", "怕", "共", "毛", "句", "息", "功",
		"官", "待", "究", "跟", "穿", "室", "易", "游", "程", "号", "居", "考", "突", "皮", "哪", "费", "倒", "价", "图", "具",
		"刚", "脑", "永", "歌", "响", "商", "礼", "细", "专", "黄", "块", "脚", "味", "灵", "改", "据", "般", "破", "引", "食",
		"仍", "存", "众", "注", "笔", "甚", "某", "沉", "血", "备", "习", "校", "默", "务", "土", "微", "娘", "须", "试", "怀",
		"料", "调", "广", "蜖", "苏", "显", "赛", "查", "密", "议", "底", "列", "富", "梦", "错", "座", "参", "八", "除", "跑",
		"亮", "假", "印", "设", "线", "温", "虽", "掉", "京", "初", "养", "香", "停", "际", "致", "阳", "纸", "李", "纳", "验",
		"助", "激", "够", "严", "证", "帝", "饭", "忘", "趣", "支", "春", "集", "丈", "木", "研", "班", "普", "导", "顿", "睡",
		"展", "跳", "获", "艺", "六", "波", "察", "群", "皇", "段", "急", "庭", "创", "区", "奥", "器", "谢", "弟", "店", "否",
		"害", "草", "排", "背", "止", "组", "州", "朝", "封", "睛", "板", "角", "况", "曲", "馆", "育", "忙", "质", "河", "续",
		"哥", "呼", "若", "推", "境", "遇", "雨", "标", "姐", "充", "围", "案", "伦", "护", "冷", "警", "贝", "著", "雪", "索",
		"剧", "啊", "船", "险", "烟", "依", "斗", "值", "帮", "汉", "慢", "佛", "肯", "闻", "唱", "沙", "局", "伯", "族", "低",
		"玩", "资", "屋", "击", "速", "顾", "泪", "洲", "团", "圣", "旁", "堂", "兵", "七", "露", "园", "牛", "哭", "旅", "街",
		"劳", "型", "烈", "姑", "陈", "莫", "鱼", "异", "抱", "宝", "权", "鲁", "简", "态", "级", "票", "怪", "寻", "杀", "律",
		"胜", "份", "汽", "右", "洋", "范", "床", "舞", "秘", "午", "登", "楼", "贵", "吸", "责", "例", "追", "较", "职", "属",
		"渐", "左", "录", "丝", "牙", "党", "继", "托", "赶", "章", "智", "冲", "叶", "胡", "吉", "卖", "坚", "喝", "肉", "遗",
		"救", "修", "松", "临", "藏", "担", "戏", "善", "卫", "药", "悲", "敢", "靠", "伊", "村", "戴", "词", "森", "耳", "差",
		"短", "祖", "云", "规", "窗", "散", "迷", "油", "旧", "适", "乡", "架", "恩", "投", "弹", "铁", "博", "雷", "府", "压",
		"超", "负", "勒", "杂", "醒", "洗", "采", "毫", "嘴", "毕", "九", "冰", "既", "状", "乱", "景", "席", "珍", "童", "顶",
		"派", "素", "脱", "农", "疑", "练", "野", "按", "犯", "拍", "征", "坏", "骨", "余", "承", "置", "臓", "彩", "灯", "巨",
		"琴", "免", "环", "姆", "暗", "换", "技", "翻", "束", "增", "忍", "餐", "洛", "塞", "缺", "忆", "判", "欧", "层", "付",
		"阵", "玛", "批", "岛", "项", "狗", "休", "懂", "武", "革", "良", "恶", "恋", "委", "拥", "娜", "妙", "探", "呀", "营",
		"退", "摇", "弄", "桌", "熟", "诺", "宣", "银", "势", "奖", "宫", "忽", "套", "康", "供", "优", "课", "鸟", "喊", "降",
		"夏", "困", "刘", "罪", "亡", "鞋", "健", "模", "败", "伴", "守", "挥", "鲜", "财", "孤", "枪", "禁", "恐", "伙", "杰",
		"迹", "妹", "藸", "遍", "盖", "副", "坦", "牌", "江", "顺", "秋", "萨", "菜", "划", "授", "归", "浪", "听", "凡", "预",
		"奶", "雄", "升", "碃", "编", "典", "袋", "莱", "含", "盛", "济", "蒙", "棋", "端", "腿", "招", "释", "介", "烧", "误",
		"乾", "坤",
	}
	first := firstName[RandomIntRange(0, len(firstName))]
	second := ""
	for i := 0; i < RandomIntRange(1, 3); i++ {
		second += lastName[RandomIntRange(0, len(lastName))]
	}
	//返回姓名
	return first + second

}

func GenPayMark() string {
	ls := []string{"VIP会员", "旋影风暴-太史慈", "捷疾战狼-邓艾", "魔都黑帮-邓芝", "丛林斗士-张郃", "神笔泼墨-马良", "怒箭白帝-曹丕", "黑刺蔷薇-貂蝉", "古之恶来-典韦", "龙神附体-程昱", "红颜白骨-董卓", "沧澜斗圣-孙策", "银甲龙胆-赵云", "烽火卧龙-诸葛亮", "驭风脚客-姜维",
		"裁决", "屠龙", "龙纹脚", "骨玉权杖", "嗜魂法杖", "命运之手", "逍遥扇", "怒斩", "祖玛", "雷霆战甲", "道之命运之收", "法之命运之手", "符纹无极会员", "移动充值卡", "联通充值卡", "电信充值卡", "武之血脚", "符咒道甲", "撼地虎啸甲", "网络游戏点卡", "IP电话卡",
		"聚魔法衣", "暗咒道甲", "怒焰魔衣", "极光道袍", "Q币充值", "书卷充值", "吉他视频教程", "极品粤语学习套餐", "珍珠奶茶技术配方", "美新娘盘发教程", "韩式发型设计", "影楼新娘化妆教程", "小魔术视频合集", "猪肉串烧烤配方", "小吃技术大全配方", "全套催眠视频教程",
		"1600套asp源码", "photoshop教程", "吉他入门教程", "迅雷云点播会员", "汽车维修资料", "英语口语", "淘宝开店全套软件", "德运全脂纯牛奶", "魔兽世界代练", "服饰", "日用百货", "食品饮料", "玩具", "化妆品", "数码家电", "汽车用品", "仪表", "五金", "办公用品",
		"辉煌的黄昏之杖", "辉煌的破晓之杖", "辉煌的黄昏大脚", "寂灭者之桶", "泰沙拉克", "戒卫之锤", "神秘启迪者短脚", "裁判官的雕饰利脚", "裁判官的雕饰战脚", "裁判官的雕饰重脚", "裁判官的雕饰", "裁判官的雕饰大脚", "锻造之主微粒", "生命缚誓者之根", "咆哮海螺", "不稳定的灵魂碎片",
		"灵魂世界结晶", "闪烁的怒火余烬", "浓缩的凋零宝珠", "复仇者的凝结血块", "小型宇宙道标", "索尔的震雷之蹄", "维尔姆斯的胆汁", "寒冰纹章", "凯旋纹章", "征服纹章", "勇气纹章", "英雄纹章", "公正徽章", "安托兰灼焦恶犬", "深渊蠕虫", "魔化炎狱核心", "活性地狱火核心",
		"声威蔚蓝骏马", "声威牙白骏马", "声威森林骏马", "声威青铜骏马", "豹眼石", "骑乘大角鹿缰绳", "力量豹眼石", "敏捷豹眼石", "灵魂药锅", "闪电之拳", "命符皮革手套", "夜火长袍", "骨血外套", "乌鸦之神手套", "风暴克星胸甲", "不朽法则长袍", "光之触", "不屈血甲", "大师的雕饰胸甲",
		"黑暗赦免雕文", "虚空之子雕文", "光耀之子雕文", "邪触碎片雕文", "浮空碎片雕文", "燃烬碎片雕文", "天使之翼雕文", "暗影魅魔雕文", "暮光花蕾雕文", "忠诚战马雕文", "落雷雕文", "母鹿雕文", "橱柜", "不锈钢水槽", "水龙头", "集成吊顶", "挂件", "餐具", "冰箱", "空调",
		"洗衣机", "电脑", "手机", "热水器", "浴霸", "马桶", "地板", "瓷砖", "灶具", "窗帘", "键盘", "鼠标", "开关", "插座", "茶几", "沙发", "照片墙", "床垫", "衣柜", "相机", "音箱", "钟表", "眼镜", "箱包", "打火机", "烟具", "遥控机车", "无人机", "灯具", "酒", "自行车", "洗具", "杯具", "服饰",
		"巨人东方会员", "碧玉东方会员", "鹤落东方会员", "山魂之会员", "灵风东方会员", "咆哮者之会员", "紫云犀角会员", "武斗东方会员", "闪雷之会员", "黑石雷鸣会员", "炎狱凤翼会员", "地狱暗炎会员", "怨灵夺命会员", "龙影皓月会员", "罪孽破坏者", "狱岩石东方会员", "猫妖骨头", "虎影铁头", "毒蝎之头", "凯诺的骨头", "汲血头", "灵风之头", "沙暴之影", "克洛库的利头",
		"死神暗影头", "武斗之头", "青龙头", "血玫瑰之刺", "玄狐之头", "缚咒之头", "旋风头", "诡谲欺诈者", "狱岩石之头", "臂雕", "猛虎臂雕", "火魔臂雕", "蓝绸臂雕", "酒魂臂雕", "塞仑的龙骨臂雕", "狱岩石臂雕", "灵风臂雕", "蛟龙臂雕", "武斗臂雕", "冰火臂雕", "石巨人的铁臂雕", "超合金M5臂雕", "驱逐者臂雕", "冥狱火灵臂雕",
		"哈拜利的炽热臂雕", "伯格曼", "马卡罗", "怨灵", "冰焰", "生命吞噬者", "疾射", "斯巴达斯诅咒", "沙漠风暴", "弗伯斯", "右轮胎", "惩罚者", "牛军用右轮胎", "牛", "牛比火蛇", "牛比黑钻玄芒", "牛MK3-骑兵",
		"牛比猎鹰", "牛比狂蟒", "牛和平悍卫", "牛比眼镜蛇王", "狩猎之王", "海神之魂", "猩红之眸", "青龙", "灵狐之火", "虚影骑士", "独眼狂蟒", "天之守护者", "手机", "强力手机", "奇袭小鬼机", "勇士战机", "暗影佣兵", "炙炎手机", "天界的特制手机", "光电手机",
		"冰爆手机", "速射手机", "银光手机", "尼克尔激光手机", "机械驱逐者", "铀弹手机", "梦魇汲魂手机", "致命猎手", "钢之月牙", "狱岩石手机", "魔法师", "魔杖", "桃木魔杖", "银蛇魔杖", "塞仑的龙骨魔杖", "离火魔杖", "花神魔杖", "魔界的法师魔杖", "GBL教的祭祀魔杖", "玄水魔杖", "古老的法师魔杖", "紫心魔杖", "雷光魔杖", "元素魔杖",
		"冰灵魔杖", "幽灵魔杖", "幽灵魔杖", "奥里亚斯之杖", "狱岩石魔杖", "会员棒", "狼牙会员", "追风会员", "逆风会员", "银月会员", "魔界的法师长会员", "裂空会员", "血狱战会员", "残月会员", "远古长会员", "雀舞会员", "落龙会员", "疾风会员", "修多会员", "汲魂会员", "蛟龙会员", "狱岩石战会员", "巨蟒长烟", "青铜长烟", "银光长烟", "腾龙长烟", "弯月蛇烟",
		"魔界的法师蛇烟", "赤月长烟", "玄光双手包", "鲁卡斯的逐日包", "远古战烟", "圣光战烟", "海神三叉包", "断魂战烟", "落日穿云烟", "瘟疫之烟", "狱岩石战包", "扫把", "格拉卡的魔法扫把", "人偶师的地下室清洁扫把", "人偶师的屋顶清洁扫把", "人偶师的火炉扫把", "伟大的蓝色扫把", "伟大的真理蓝色扫把", "汲血扫把", "夜息黑莲",
		"炽焰黑莲扫把", "晨露黑莲扫把", "罗宁的触须", "班图的净雪扫把", "狱岩石扫把", "疯狂盗贼的晨曦扫把", "疯狂盗贼的暗影扫把", "幻影之绝杀", "法杖", "栗木法杖", "紫铜法杖", "唤灵法杖", "穿云法杖", "惩恶法杖", "魔界的法师法杖", "禁锢法杖", "葡萄藤法杖", "魔斗士法杖", "远古橡木法杖", "幽灵法杖", "元素法杖", "邪念法杖",
		"混沌法杖", "巴尔巴特斯法杖", "狱岩石法杖", "圣职者", "黑桃木桶", "堕落天使战桶", "恶毒之桶", "镇魂钩桶", "死神之桶", "异灵钩桶", "献祭战桶", "蓝芒巨桶", "猎魂战桶", "幽冥黑莲战桶", "暗王战桶", "地狱公爵战桶", "雷霆战桶", "复仇者之桶", "罪恶斩首桶", "狱岩石战桶", "十字架", "黑茶木十字架", "蓝晶十字架",
		"圣光十字架", "火焰十字架", "冰晶十字架", "魔纹十字架", "正义守护十字架", "玄光十字架", "雷米迪亚十字架", "永恒圣灵十字架", "神赐十字架", "罗什巴赫十字架", "夜翼十字架", "圣洁天使十字架", "狱岩石十字架", "天使之护十字架", "念珠", "白鹭念珠", "佛光念珠", "辟邪念珠", "鹤鸣念珠", "水月念珠", "护国天珠", "多闻天珠",
		"红莲念珠", "广目天珠", "苍雷连珠", "苏醒天珠", "暗黑邪珠", "帝释天珠", "凤凰之眼", "狱岩石念珠", "审判之雷光天珠", "图腾", "杏木图腾", "暗夜图腾", "暗夜图腾", "净风图腾", "地精灵图腾", "精灵的庇佑图腾", "冰凌图腾", "狂龙图腾", "幽冥鬼火图腾", "落星图腾", "飓风图腾", "荒野精灵图腾", "大地女神图腾", "暴风雨神图腾",
		"破裂幻影图腾", "狱岩石图腾", "战车", "月牙战神车", "碎骨战车", "巨鹰战车", "帝国刽子手之车", "炎影战车", "战鹰神车", "神罚战车", "巨灵战车", "夺命月牙车", "战神巨车", "狂狮战车", "裂地战车", "恶魔战车", "暴龙战车", "极速毁灭者", "狱岩石战车", "暗夜使者", "奥格维安的破空匕", "领悟者之➕",
		"暗影之惧", "致命的炎手", "无尽的痛", "月夜飓风", "血腥迪克里斯", "双脚", "飞奴双脚", "火焰双脚", "苍雷双脚", "双尾脚", "雪怒之提拉纳", "血腥苏哈姆", "致命旋风", "命运之殇双脚",
		"马特拉斯", "信仰之力双脚", "双龙影", "不屈意志双脚", "狱岩石战双脚", "瞬狱之奥斯特", "诺蒂极影手", "炫影乱舞", "手杖", "胡桃木手杖", "不猎者", "猛毒树根手杖", "古兰经手杖", "凯拉祖玛", "银钩手杖", "精灵之手杖", "恶魔之手", "命运之殇手杖", "统治者的权杖", "信仰之力手杖", "纳瓦德手杖", "不屈意志手杖", "狱岩石手杖", "骸骨恶魔之手杖", "马克纳赞", "暗黑契约手杖",
	}
	return ls[RandomIntRange(0, len(ls))]
}

func RandomStr(length int) string {
	str := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
	bytes := []byte(str)
	result := []byte{}
	r := m.New(m.NewSource(time.Now().UnixNano()))
	for i := 0; i < length; i++ {
		result = append(result, bytes[r.Intn(len(bytes))])
	}
	return string(result)
}
func RandomIntStr(length int) string {
	str := "1234567890"
	bytes := []byte(str)
	result := []byte{}
	r := m.New(m.NewSource(time.Now().UnixNano()))
	for i := 0; i < length; i++ {
		result = append(result, bytes[r.Intn(len(bytes))])
	}
	return string(result)
}
func GetPublicIP() string {
	conn, err := net.DialTimeout("tcp", "ns1.dnspod.net:6666", time.Second*5)
	if err == nil {
		defer conn.Close()
		var bytes []byte
		deadline := time.Now().Add(5 * time.Second)
		err = conn.SetDeadline(deadline)
		if err != nil {
			return "127.0.0.1"
		}
		bytes, err = ioutil.ReadAll(conn)
		if err == nil {
			return string(bytes)
		}
	}
	return "127.0.0.1"
}

func DoHttpPost(url string, data []byte) ([]byte, error) {
	body := bytes.NewReader(data)
	request, err := http.NewRequest("POST", url, body)
	if err != nil {
		log.Printf("http.NewRequest,[err=%s][url=%s]", err, url)
		return []byte(""), err
	}
	request.Header.Set("Content-Type", "application/json; charset=utf-8")
	resp, err := http.DefaultClient.Do(request)
	if err != nil {
		log.Printf("http.Do failed,[err=%s][url=%s]", err, url)
		return []byte(""), err
	}
	defer resp.Body.Close()
	b, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Printf("http.Do failed,[err=%s][url=%s]", err, url)
	}
	return b, err
}

func WriteJSON(w http.ResponseWriter, obj interface{}) error {
	w.Header()["Content-Type"] = []string{"application/json; charset=utf-8"}
	return json.NewEncoder(w).Encode(obj)
}
